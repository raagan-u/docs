{
  "post": {
    "operationId": "attestedQuote",
    "summary": "Get an attested quote for an order.",
    "description": "Retrieves an attested quote, which includes a signature and a validity period ensuring that the quote remains valid until a specific expiry timestamp. This was previously a required step before creating an order, acting as confirmation of the initial quote. With the updated flow, this step is now optional, you can create an order directly after fetching the initial quote, without needing to call this endpoint. However, if your integration still relies on attested quotes, it will continue to work as expected.",
    "servers": [
      {
        "url": "https://testnet.api.garden.finance/quote",
        "description": "Testnet - Quote server"
      },
      {
        "url": "https://api.garden.finance/quote",
        "description": "Mainnet - Quote server"
      }
    ],
    "security": [],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "source_chain": {
                "type": "string",
                "description": "The blockchain network where the swap originates.",
                "example": "bitcoin"
              },
              "destination_chain": {
                "type": "string",
                "description": "The blockchain network where the swap completes.",
                "example": "ethereum"
              },
              "source_asset": {
                "type": "string",
                "description": "The asset being swapped on the source blockchain.",
                "example": "primary"
              },
              "destination_asset": {
                "type": "string",
                "description": "The asset to be received on the destination blockchain.",
                "example": "0xd8a6e3fca403d79b6ad6216b60527f51cc967d39"
              },
              "initiator_source_address": {
                "type": "string",
                "description": "The wallet address initiating the swap on the source blockchain.",
                "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
              },
              "initiator_destination_address": {
                "type": "string",
                "description": "The wallet address to receive the asset on the destination blockchain.",
                "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
              },
              "source_amount": {
                "type": "string",
                "description": "The amount of the asset being swapped on the source blockchain.",
                "example": "1000000000000000000000"
              },
              "destination_amount": {
                "type": "string",
                "description": "The amount of the asset expected on the destination blockchain.",
                "example": "1217349"
              },
              "fee": {
                "type": "string",
                "example": "1"
              },
              "nonce": {
                "type": "string",
                "description": "A unique identifier for the swap transaction to prevent duplication.",
                "example": "1741603785397"
              },
              "min_destination_confirmations": {
                "type": "integer",
                "description": "The minimum number of confirmations required on the destination blockchain to finalize the swap.",
                "example": 0
              },
              "timelock": {
                "type": "integer",
                "description": "A timeout period after which the swap expires if not completed.",
                "example": 288
              },
              "secret_hash": {
                "type": "string",
                "description": "A cryptographic hash used to verify the transaction's security.",
                "example": "f4a3b8d16e58cd30b8a0e9f504b1c7f9f24d1c70eaf2a3794b3c7e5bb7c90f5d"
              },
              "additional_data": {
                "type": "object",
                "properties": {
                  "strategy_id": {
                    "type": "string",
                    "description": "Provided by the quote server",
                    "example": "aae4bafa"
                  },
                  "bitcoin_optional_recipient": {
                    "type": "string",
                    "description": "An optional Bitcoin address to receive the output token, if specified.",
                    "example": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
                  }
                }
              },
              "affiliate_fees": {
                "type": "array",
                "description": "List of affiliate fee distributions. Each entry specifies the recipient address, chain, asset, and fee amount (in bps). Allows splitting fees across multiple affiliates.",
                "items": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "Address to which the affiliate fee will be sent.",
                      "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
                    },
                    "chain": {
                      "type": "string",
                      "description": "The blockchain on which the fee payout will occur (e.g., ethereum, base).",
                      "example": "ethereum"
                    },
                    "asset": {
                      "type": "string",
                      "description": "HTLC contract address of the supported asset used for payout (USDC or cbBTC).",
                      "example":"0xeae7721d779276eb0f5837e2fe260118724a2ba4"
                    },
                    "fee": {
                      "type": "integer",
                      "description": "Fee amount in basis points (1 bps = 0.01%).",
                      "example": 10
                    }
                  },
                  "required": ["address", "fee"]
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Successfully retrieved attested quote.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "Ok",
                    "Error"
                  ],
                  "example": "Ok",
                  "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful."
                },
                "result": {
                  "type": "object",
                  "description": "The order object",
                  "properties": {
                    "source_chain": {
                      "type": "string",
                      "description": "The blockchain network where the swap originates.",
                      "example": "bitcoin"
                    },
                    "destination_chain": {
                      "type": "string",
                      "description": "The blockchain network where the swap completes.",
                      "example": "ethereum"
                    },
                    "source_asset": {
                      "type": "string",
                      "description": "The asset being swapped on the source blockchain.",
                      "example": "primary"
                    },
                    "destination_asset": {
                      "type": "string",
                      "description": "The asset to be received on the destination blockchain.",
                      "example": "0xd8a6e3fca403d79b6ad6216b60527f51cc967d39"
                    },
                    "initiator_source_address": {
                      "type": "string",
                      "description": "The wallet address initiating the swap on the source blockchain.",
                      "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
                    },
                    "initiator_destination_address": {
                      "type": "string",
                      "description": "The wallet address to receive the asset on the destination blockchain.",
                      "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
                    },
                    "source_amount": {
                      "type": "string",
                      "description": "The amount of the asset being swapped on the source blockchain.",
                      "example": "1000000000000000000000"
                    },
                    "destination_amount": {
                      "type": "string",
                      "description": "The amount of the asset expected on the destination blockchain.",
                      "example": "1217349"
                    },
                    "fee": {
                      "type": "string",
                      "description": "The total cost associated with the swap transaction.",
                      "example": "1"
                    },
                    "nonce": {
                      "type": "string",
                      "description": "A unique identifier for the swap transaction to prevent duplication.",
                      "example": "1741603785397"
                    },
                    "min_destination_confirmations": {
                      "type": "integer",
                      "description": "The minimum number of confirmations required on the destination blockchain to finalize the swap.",
                      "example": 0
                    },
                    "timelock": {
                      "type": "integer",
                      "description": "A timeout period after which the swap expires if not completed.",
                      "example": 288
                    },
                    "secret_hash": {
                      "type": "string",
                      "description": "A cryptographic hash used to verify the transaction's security.",
                      "example": "f4a3b8d16e58cd30b8a0e9f504b1c7f9f24d1c70eaf2a3794b3c7e5bb7c90f5d"
                    },
                    "affiliate_fees":{
                      "type": "object",
                      "properties":{
                          "address": {
                        "type": "string",
                        "description": "Address to which the affiliate fee will be sent.",
                        "example": "0x5A4b7eD8c2a1F1e34C8e9...6A3C5D2B1f8E7A9C"
                        },
                        "chain": {
                          "type": "string",
                          "description": "The blockchain on which the fee payout will occur (e.g., ethereum, base).",
                          "example": "ethereum"
                        },
                        "asset": {
                          "type": "string",
                          "description": "HTLC contract address of the supported asset used for payout (USDC or cbBTC).",
                          "example":"0xeae7721d779276eb0f5837e2fe260118724a2ba4"
                        },
                        "fee": {
                          "type": "integer",
                          "description": "Fee amount in basis points (1 bps = 0.01%).",
                          "example": 10
                        },
                        "amount": {
                          "type": "string",
                          "description": "Portion of affiliate fees per order, paid in the smallest units of the  selected asset",
                          "example": "100"
                        }
                      }
                    },
                    "additional_data": {
                      "type": "object",
                      "properties": {
                        "strategy_id": {
                          "type": "string",
                          "description": "Provided by the quote server",
                          "example": "bre112"
                        },
                        "input_token_price": {
                          "type": "number",
                          "format": "double",
                          "description": "Provided by the quote server",
                          "example": 97056.37479601552
                        },
                        "output_token_price": {
                          "type": "number",
                          "format": "double",
                          "description": "Provided by the quote server",
                          "example": 97056.37479601552
                        },
                        "deadline": {
                          "type": "string",
                          "description": "Validity till the current quote is valid",
                          "example": 1741607397
                        },
                        "bitcoin_optional_recipient": {
                          "type": "string",
                          "description": "An optional Bitcoin address to receive the output token, if specified.",
                          "example": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
                        },
                        "sig": {
                          "type": "string",
                          "description": "",
                          "example": "d5985058aed6fcec1ed4a537783394e362b21c7a94929754b757b71b57e653b876e687d81363f67fe2ed9bf619287cb0702f1da64c8b1310085fe761b73bb8761b"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Failed to retrieve attested quote.",
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "status": {
                  "type": "string",
                  "enum": [
                    "Ok",
                    "Error"
                  ],
                  "example": "Error",
                  "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful."
                },
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "number",
                      "description": "The numeric status code indicating the type of error or response.",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "A descriptive message providing details about the error or response.",
                      "example": "0x prefixed secret_hash are not allowed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tags": [
      "Quote"
    ]
  }
}
